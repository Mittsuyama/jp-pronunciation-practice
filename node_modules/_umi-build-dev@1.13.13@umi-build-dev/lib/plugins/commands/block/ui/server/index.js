"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

var _clearGitCache = _interopRequireDefault(require("../../clearGitCache"));

var _Block = _interopRequireDefault(require("./core/Block"));

var _util = require("./util");

var _haveRootBinding = _interopRequireDefault(require("../../sdk/haveRootBinding"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = api => {
  const blockService = new _Block.default(api); // 区块列表缓存

  const blockListCache = {};
  api.onUISocket(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(function* ({
      action,
      failure,
      success,
      send
    }) {
      blockService.init(send);
      const type = action.type,
            _action$payload = action.payload,
            payload = _action$payload === void 0 ? {} : _action$payload,
            lang = action.lang; // 区块资源可配置

      let resources = [];
      resources = api.applyPlugins('addBlockUIResource', {
        initialValue: _util.DEFAULT_RESOURCES
      });
      resources = api.applyPlugins('modifyBlockUIResources', {
        initialValue: resources
      });

      switch (type) {
        // 获得项目的路由
        case 'org.umi.block.routes':
          _asyncToGenerator(function* () {
            try {
              const routers = blockService.depthRouterConfig();
              success({
                data: routers,
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;
        // 获得项目 page 下的目录结构

        case 'org.umi.block.pageFolders':
          _asyncToGenerator(function* () {
            try {
              success({
                data: blockService.getFolderTreeData(),
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;
        // 获得项目的路由配置和默认的组件

        case 'org.umi.block.routeFiles':
          _asyncToGenerator(function* () {
            try {
              success({
                data: blockService.depthRouteComponentConfig(),
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;
        // 清空缓存

        case 'org.umi.block.clear':
          _asyncToGenerator(function* () {
            try {
              const info = (0, _clearGitCache.default)(payload, api);
              success({
                data: info,
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;
        // 区块获得数据源

        case 'org.umi.block.resource':
          success({
            data: resources,
            success: true
          });
          break;
        // 获取区块列表

        case 'org.umi.block.list':
          _asyncToGenerator(function* () {
            try {
              const _ref7 = payload,
                    resourceId = _ref7.resourceId;
              let data = blockListCache[resourceId];

              if (!data || payload.force) {
                data = yield blockService.getBlockList(resourceId, resources);
                blockListCache[resourceId] = data;
              }

              success({
                data,
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;
        // 获取安装中的日志

        case 'org.umi.block.get-adding-blocks-log':
          success({
            data: blockService.getLog(),
            success: true
          });
          break;
        // 获取安装中区块 url

        case 'org.umi.block.get-adding-block-url':
          success({
            data: blockService.getBlockUrl(),
            success: true
          });
          break;
        // 取消任务

        case 'org.umi.block.cancel':
          success({
            data: blockService.cancel(),
            success: true
          });
          break;
        // 取消任务

        case 'org.umi.block.retry':
          success({
            data: blockService.retry(_objectSpread({}, payload)),
            success: true
          });
          break;
        // 区块添加

        case 'org.umi.block.add':
          _asyncToGenerator(function* () {
            const _ref9 = payload,
                  url = _ref9.url; // 执行逻辑

            try {
              yield blockService.run(_objectSpread({}, payload));
              success({
                data: {
                  message: `🎊 ${url} block is adding`
                },
                success: true
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;

        case 'org.umi.block.checkIfCanAdd':
          _asyncToGenerator(function* () {
            const _ref11 = payload,
                  item = _ref11.item;
            /**
             * 获取config 中 react 的判断
             * @param reactPlugin   reactPlugin<any>
             */

            function genReactPluginOpts(reactPlugin) {
              if (reactPlugin && typeof reactPlugin !== 'string') {
                return reactPlugin[1];
              }

              return {};
            }
            /**
             * 是不是有这个 feature tag
             * @param feature
             */


            function haveFeature(feature) {
              return item.features && item.features.includes(feature);
            }

            if (!api.config.routes) {
              failure({
                message: lang === 'zh-CN' ? '区块添加暂不支持约定式路由，请先转成配置式路由。' : 'The block adding does not support the conventional route, please convert to a configuration route.'
              });
              return;
            }

            const payloadType = payload.type === 'block' ? '区块' : '模板';
            const isBigfish = !!process.env.BIGFISH_COMPAT;
            const reactPlugin = (api.config.plugins || []).find(p => {
              return p === 'umi-plugin-react' || p[0] === 'umi-plugin-react';
            });
            const reactPluginOpts = genReactPluginOpts(reactPlugin); // 提前判断是否有 package.json，区块添加时如果没有会报错

            if (!(0, _fs().existsSync)((0, _path().join)(api.cwd, 'package.json'))) {
              failure({
                message: lang === 'zh-CN' ? `${payloadType}添加需要在项目根目录有 package.json` : `package.json is required to add ${payloadType}`
              });
              return;
            } // antd 特性依赖
            // bigfish 默认开了 antd
            // if (haveFeature('antd') && !isBigfish) {
            //   if (!reactPlugin || !reactPluginOpts.antd) {
            //     failure({
            //       message:
            //         lang === 'zh-CN'
            //           ? `${payloadType}依赖 antd，请安装 umi-plugin-react 插件并开启 antd 。`
            //           : 'Block depends on antd, please install umi-plugin-react and enable antd.',
            //     });
            //     return;
            //   }
            // }
            // dva 特性依赖


            if (haveFeature('dva')) {
              if (isBigfish) {
                if (api.config.dva === false) {
                  failure({
                    message: `${payloadType}依赖 dva，请开启 dva 配置。`
                  });
                  return;
                }
              } else if (!reactPlugin || !reactPluginOpts.dva) {
                failure({
                  message: lang === 'zh-CN' ? `${payloadType}依赖 dva，请安装 umi-plugin-react 插件并开启 dva 。` : 'Block depends on dva, please install umi-plugin-react and enable dva.'
                });
                return;
              }
            } // locale 特性依赖


            if (haveFeature('i18n')) {
              if (isBigfish) {
                if (!api.config.locale) {
                  failure({
                    message: `${payloadType}依赖 locale，请开启 locale 配置。`
                  });
                  return;
                }
              }

              if (!reactPlugin || !reactPluginOpts.locale) {
                failure({
                  message: lang === 'zh-CN' ? `${payloadType}依赖国际化（i18n），请安装 umi-plugin-react 插件并开启 locale 。` : 'Block depends on i18n, please install umi-plugin-react and enable locale.'
                });
                return;
              }
            }

            success({
              data: true,
              success: true
            });
          })();

          break;
        // 检查路由是否存在

        case 'org.umi.block.checkExistRoute':
          const _ref12 = payload,
                path = _ref12.path;
          success({
            exists: blockService.routeExists(path),
            success: true
          });
          break;
        // 检查文件路径是否存在

        case 'org.umi.block.checkExistFilePath':
          try {
            const _ref13 = payload,
                  blockPath = _ref13.path; // 拼接真实的路径，应该是项目的 pages 目录下

            const absPath = api.winPath((0, _path().join)(api.paths.absPagesPath, blockPath));
            success({
              exists: (0, _fs().existsSync)(absPath),
              success: true
            });
          } catch (error) {
            failure({
              message: error.message,
              success: false
            });
          }

          break;
        // 检查文件里使用某个变量名是否可以

        case 'org.umi.block.checkBindingInFile':
          _asyncToGenerator(function* () {
            try {
              const _ref15 = payload,
                    targetPath = _ref15.path,
                    name = _ref15.name; // 找到具体的 js

              const absTargetPath = api.winPath((0, _path().join)(api.paths.absPagesPath, api.winPath(targetPath).replace(api.winPath(api.paths.pagesPath), ''))); // 有些用户路由下载路径是不在的，这里拦住他们

              if (!(0, _fs().existsSync)(absTargetPath)) {
                failure({
                  message: ` ${absTargetPath} 目录不存在!`,
                  success: false
                });
                return;
              }

              const entryPath = api.findJS(absTargetPath, 'index') || api.findJS(absTargetPath, '');

              if (!entryPath) {
                failure({
                  message: `未在 ${absTargetPath} 目录下找到 index.(ts|tsx|js|jsx) !`,
                  success: false
                });
                return;
              }

              (0, _haveRootBinding.default)((0, _fs().readFileSync)(entryPath, 'utf-8'), name).then(exists => {
                success({
                  exists,
                  success: true
                });
              });
            } catch (error) {
              failure({
                message: error.message,
                success: false
              });
            }
          })();

          break;

        /**
         *  C:\GitHub\ant-design-pro\src\pages\Welcome\index.tsx
         * --->
         *   Welcome\index.tsx
         *  用与将路径变化为相对路径
         *  */

        case 'org.umi.block.getRelativePagesPath':
          _asyncToGenerator(function* () {
            const _ref17 = payload,
                  targetPath = _ref17.path;
            success({
              data: api.winPath(targetPath).replace(api.winPath(api.cwd), '').replace(api.winPath(api.paths.pagesPath), '').replace(/\//g, '/').replace(/\/\//g, '/'),
              success: true
            });
          })();

          break;

        default:
          break;
      }
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = _default;